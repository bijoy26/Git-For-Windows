VI Editor Shortcuts :

VI <filename>	//opens file in VI editor
	1. 'Q' - Get back into main console
	2. 'I' - Goes into INSERT mode in LESS editor
	3. ':q' -Back to main console from LESS without saving changes
	4. ':x' -Back to main console from LESS with saving changes


GIT BASH COMMANDS:

<SHIFT>+<INSERT>  - paste text

pwd 	 						//print working directory(current directory)
cd <path> 				//change directory to <path>
cd /   					  // goto git bash folder
cd / (CMD) 				// goto root drive
cd	 							// goto home directory
ls    					 	 //list directory items
ls -l   					 // list items with more description
ls -al  				   // list items with hidden folders
dir (CMD) 		 		 //does the same as ls
dir *.txt (CMD) 	 // shows all .txt files


dir /a (CMD) //same
clear		//clears screen
cls (CMD)	//same
exit

which <command-name>     // shows the command's residing directory
which ls									//show 'ls command''s directory
where <command-name>  (CMD)  //same as which
where notepad  (CMD)  				//same as which
help											// information about 'help'  provided by git hash
help cd      						  // help about 'cd command'
unzip "filename"  			 //unzips the zipped file

cat <file-name>			//print file-name contents
cat ~/.gitconfig   // prints contents of .gitconfig located at user home directory
less <file-name>		//print file-name contents (with a lot of text) in less
mkdir <folder-name>  	//make directory
rmdir <folder-name>  	//remove directory

rm <file-name>		//removes file
rm -rf <file-name>	//removes file recursively(-r) and by force(-f)

cp <source-file-name> <destination-file-name>	 //copies source file contents into destination file
mv <file-name> <new-name/new-directory>		// moves file/ rename file

touch <file-name>	//make file
echo "String"		//prints Strings
echo "String" > demo.txt    // writes/replaces 'String' into demo.txt
echo "String" >> demo.txt    // Appends 'String' into demo.txt



git version  // shows current git version

git help  	// for git commands help
git help -a 	//for listing git subcommands
git help config  //for git configuration manual

git config --global user.name "Anjum Rashid"  					 //saves username in global config file(system user level)
git config --global user.email "anjum.bijoy@gmail.com" 	 //saves email in global config file
git config --global core.editor notepad 									// sets notepad as editor in global config file
git config --global core.editor "atom --wait"   						//sets atom as editor and waits for git use it as commit message editor
git config --global alias.<Alias-Name> "<Git-Command>"   		  // Assigns an user defined alias for the git command specified in the string
git config --global alias.hist "log --oneline --all --decorate --graph"   	//Assigns 'Git hist' command for 'Git log --online .....'command

git config --global diff.tool <Tool-Name>					// names Git Diff tool 'Tool-Name'
git config --global diff.tool p4merge	    					// registers Git Diff tool name 'p4merge'
git config --global merge.tool p4merge	  				  // registers Git Merge tool name 'p4merge'
git config --global difftool.p4merge.path <EXE-PATH>    // sets Git Diff tool path to <EXE-PATH> for p4merge
git config --global mergetool.p4merge.path <EXE-PATH>   // does same for Merge Tool
git config --global difftool.p4merge.path <C:/Program Files/Perforce/p4merge.exe>  // sets Git Diff tool path to <EXE-PATH> for p4merge
git config --global difftool.prompt false 	// disables prompt for 3rd party tool p4marge
git config --global mergetool.prompt false 	// same

git config --global --list  // list all the config setting in user level
git config --global -e	     // opens up the config file in default editor


git init <repo-name>		// initiates an empty repo locally
git init .		        // Adds source control (initiates repo)on current folder
git clone <https-repo-link/SSH-link>	// copies the repo contents in current local directory
git add <file-name>		   //adds untracked/tracked file changes to staging area
git add . Or git add -A		  //recursively add all untracked files and folders
git commit -m "MESSAGE"           // commits staged file changes into git repo with "MESSAGE" inline
git commit -am "MESSAGE"          // -a is for both add and commit at the same time


git remote		//shows name of the remote reference
git remote -v 		//shows which remote repo is configured (remote repo reference is called origin)
git remote show <REMOTE-REF>  		//shows detailed info about remote reference
git remote show origin			//shows detailed info about origin reference
git remote add <REMOTE-REF> <HTTPS-LINK/SSH-LINK>  	   // adds a remote ref (origin) to local repo to connect remote repo
git remote add upstream <UPSTREAM-URL>			// adds a remote ref for the original repository so that it can sync between forked repository
git remote rm <REMOTE-REF>		// removes remote ref (for shifting from remote HTTPS to SSH)
git remote rm origin 		// removes remote ref 'origin'


git push <remote-repo> <branch-name>   //push to remote specified branch of origin reference
git push origin master 		//push to remote master branch of origin reference
git push -u origin <branch-name>       // push and sets up a tracking relationship of local and remote repo on specified branch (for locally created new branch, a remote branch with <BRANCH-NAME> will be created and tracked)
git push -u origin master       // push and sets up a tracking relationship of local and remote repo on master branch
git push 			// pushes to origin master by default if first time previous command is executed
git push origin --delete <remote-branch-name> 		//// delete branch remotely that is locally removed before

git fetch --all 	// fetches all the changes from remote repo
git fetch upstream	// fetches the upstream(original repo) branches (requires upstream remote ref to be configured)
git pull origin master 	 // fetch the changes from remote master repo + merges with local repo

git mv <File-name> <New-Filename>	// renames File-name (Git is case sensitive, Windows is insensitive)

git status			//current state(branch) of git repository
git log				// shows commit history
git log -- <File-name>		// shows commit history of only the specified file
git log --follow -- <File-name>		// shows specific commit history with rename commits(file deletion+addition)
git log --oneline --all --decorate --graph    // displays ALL committs, each in ONE LINE , with DECORATIONS(reference names), In GRAPH format(for merges)

git reset HEAD -- <File-Name>	// untracks the file from working directory
git checkout -- <File-Name>	// Reverts File back to last commited version
git checkout <BRANCH-NAME>	// Switches to <BRANCH-NAME> branch (moves the HEAD to the new branch)
git checkout -b <BRANCH-NAME>	// Create a new <BRANCH-NAME> and switches to it

git checkout <COMMIT-ID>	// detaches the HEAD and assigns it to specified commit
git checkout HEAD^	        // assigns HEAD to it's parent commit
git checkout HEAD~3	        // assigns HEAD to it's 3 level upper commit


git diff	   	// prints the comparison of 'Working Directory' and Staging Area/Last Commit using Git's Diff Tool
git diff HEAD   	//  prints the comparison of Working Directory/Stage and Last Commit (HEAD means last commit of current batch)
git diff HEAD~2   	//  prints the comparison of Working Directory/Stage and 2 level Previous Commit (HEAD~2 == HEAD-2)
git diff <COMMIT-ID-HASH>      // comparison of Working Directory and specified Commit id
git diff <COMMIT-ID-1>..<COMMIT-ID-2>    // comparison of Commit id -1(previous) vs Commit id-2(latest)
git diff origin/master	//  comparison of Working Directory/Stage and master branch of origin ref
git diff <COMMIT-ID-HASH> origin/master		//  comparison of Commit-id-1 and master branch of origin ref
git diff <BRANCH-1> <BRANCH-2>		// comparison of Branch-1 and Branch-2 changes

git diff --cached HEAD 	       //  prints the comparison of Staging Area and Last Commit (--cached means Staging cache)
git diff --cached HEAD~2         //  prints the comparison of Staging Area and HEAD minus 2 commit
git diff --cached <COMMIT-ID-HASH>       // comparision of Staging area and specified commit
git diff --cached origin/master	         //  comparison of Staging Area and master branch of origin ref

git difftool		                // prints the comparison of Working Directory and Staging Area using p4merge tool
git difftool HEAD 			// does the same as Diff
git difftool HEAD~1 			// same
git difftool <COMMIT-ID-HASH>		//same
git difftool origin/master		//  same
git difftool --cached HEAD 		// same
git difftool --cached HEAD~2 		// same
git difftool --cached <COMMIT-ID-HASH> 	// same
git difftool --cached origin/master	// same

git mergetool		// launches p4merge as mergetool when having merge conflict

git show HEAD  // comparison of HEAD(Last Commit) with its previous commit
git show HEAD~<LEVEL>  // comparison of HEAD minus LEVEL commit with its previous commit
git show <COMMIT-ID-HASH>  // comparison of specific commit hash with its previous commit

git branch		// lists current local branches
git branch -a		// lists all local and remote branches
git branch <BRANCH-NAME>  // Creates a new branch named <BRANCH-NAME>
git branch -m <BRANCH-NAME-1> <BRANCH-NAME-2>  // Renames <BRANCH-NAME-1> with new name <BRANCH-NAME-2>
git branch -f <BRANCH-NAME> <COMMIT-ID>    // Moves a specified branch to point to the specified commit forcefully
git branch -u upstream/master		// sets up current local branch to track remote branch master of upstream ref (needs upstream remote to set up first)
git branch -d <BRANCH-NAME> 		// delete the branch only if it has already been pushed and merged with the remote branch.


git merge <BRANCH-NAME>   	 // Merges current branch with the changes of <BRANCH-NAME> branch (fast forward by default, will do Automatic Merge if both branch and master has individual commits)
git merge --no-ff <BRANCH-NAME>   	// Merges current branch with the changes of <BRANCH-NAME> branch (disables fast forward to show the merge branching changes)
git merge <BRANCH-NAME> -m <COMMIT-MSG>   // Merges current branch with the changes of <BRANCH-NAME> branch with inline commit message
git merge --abort 		// aborts from merge conflict to its previous state

ssh-keygen -t rsa -b 4096 -C "your_email@example.com"   // creates ssh key using git keygen of RSA type,4096 bit length and Comment(email) enabled
ssh -T git@github.com         //tests connection of ssh key with github (git@github.com is generic username of github)


git cherry-pick <COMMIT-ID1> <COMMIT-ID2> <COMMIT-ID3> ...  // picks specified commits from any other brances and appends them sequentially on the current branch

git rebase <BRANCH-NAME>	// Takes all the changes from current branch and replay them on the specified branch
git rebase -i <BRANCH-DEST> <BRANCH-SOURCE>	//Moves the specified changes from source branch and replay them destination branch via interactive editor

git rebase -i HEAD~3	// opens up interactive UI to pick/arrange commits from the specified range to replay current branch (interactive rebase)

git tag <TAG-TITLE>   // tags lastest commit with specified title
git tag <TAG-TITLE> <COMMIT-ID>  	// tags specified commit

git describe <COMMIT-ID / BRANCH>	// shows the closed tag commit by following format : TITLE_DISTANCE_COMMIT-ID (Ex: v2_3_gC1SH)



ATOM COMMANDS:

atom .    	 //opens up current file directory in atom
atom foldername     	//opens up current folder directory and subfiles in atom
atom folder1name folder2name 	    //opens up 2 folder directory at the tree view in atom
atom filename      	 // opens up filename in atom



CHANGE ALIAS IN BASH:

Goto User Home Directory -> Create '.bash_profile' file > Add following commands

alias <Alias-Name>='<Bash-Command>'	//replace alias name with bash command
alias ll='ls -al'
alias ghist='git hist'		// hist is an alias already configured in git environment

Save and restart git



IGNORE UNWANTED FILES IN REPO:

Create .gitignore on project directory > Add following lines-

<FILE-NAME>		//ignores file-name on repo
<FILE-DIRECTORY>	//ignore the specified folder
app.log			// ignores app.log file
*.log			//ignores all .log files



RESOLVING MERGE CONFLICT:

Merge conflict occurs when a feature branch file and the same file in master branch has changes on similiar line.
Available Options to resolve it -

1. Open up the conflicting file to analyze the portion that has conflict (marked by Git automatically)

2. (a) Use 'git merge --abort' to abort merging and modify one of the files

		-----OR-----
   (b)
	(i)   Open merge tool(p4merge) using 'git mergetool'
        (ii)  Analyze the remote(feature),base(original) and local(master) branch to
              modify the final 'union file'
	(iii) Save it, do the final git commit to resolve the conflict
	(iv)  Either save the 'Filename.orig' file (original file before merge)
	      automatically added by git or remove it
